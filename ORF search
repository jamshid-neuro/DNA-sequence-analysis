def ORF_find(orf_length = 0):
    
    while True:

        sequence = str(input('Please enter your sequence: '))
        
        # RETURNS ORFS OF ABOVE A USER-SPECIFIED LENGTH
        try:
            orf_length = int(input('Minimum ORF length:'))
            
        # IF LEFT EMPTY, ASSUMES '0' AND RETURNS ALL POSSIBLE ORFS IN EVERY FRAME
        
        except:
            
            orf_length = 0
            pass

        seq_chck = 'actg'
        result = ''
        seq_chck2 = [str(let) for let in sequence.lower()]

        for n in seq_chck2:
            if n not in seq_chck:
                result = 'nope'

        if 'nope' in result:
            print('\nYour sequence contains unacceptable characters!')
            continue
        elif  sequence == '':
            continue
            
           
        else:  
            
            triples = []

            for n, m in enumerate(sequence):
                triples.append(sequence[n:n+3].lower())

            
            frame1 = triples[0::3]
            frame2 = triples[1::3]
            frame3 = triples[2::3]
        
            ###CORRECT SO FAR!!!
            
            codes = frame1 + frame2 + frame3
    
            if 'atg' not in str(codes):

                print('\nThis sequence does not contain an ORF!\n')
                break
        
            start_codons_fr1 = []
            start_codons_fr2 = []
            start_codons_fr3 = []
            
            # TO FIND INDEXES OF START CODONS IN ALL FRAMES
            for x1, y1 in enumerate(frame1):
                
                if y1 == 'atg':
                    start_codons_fr1.append(x1)
                          
            for x2, y2 in enumerate(frame2):
                
                if y2 == 'atg':
                    start_codons_fr2.append(x2)
                    
            for x3, y3 in enumerate(frame3):
                
                if y3 == 'atg':
                    start_codons_fr3.append(x3)
      
 ##TESTED: ################# CORRECT SO FAR!!!
        
            
            # STRETCHES STARTING FROM AN ATG TO THE END OF THE SEQUENCE IN ALL FRAMES
            atg_2_end = []

            for n1 in start_codons_fr1:
        
                    atg_2_end.append(frame1[n1:]) 
           
           
            for n2 in start_codons_fr2:
        
                    atg_2_end.append(frame2[n2:])
            
          
            for n3 in start_codons_fr3:
        
                atg_2_end.append(frame3[n3:])
           
            ### CUTTING SEQUENCE STRETCHES WHEN THEY COME ACROSS ONE OF THE THREE STOP CODONS 
            orfs = []
  
            
            for seq in atg_2_end:
                       
                if 'taa' in seq:
                    orfs.append(seq[0:seq.index('taa')+1])
                  
                if 'tag' in seq:
                    orfs.append(seq[0:seq.index('tag')+1])
             
                if 'tga' in seq:
                    orfs.append(seq[0:seq.index('tga')+1])
                    
        
            ### CHECKING FOR OCCURENCE OF ANY OF THE STOP CODONS IN THE MIDDLE OF THE SEQUENCE (EXCEPT THE LAST CODE)      
            
            orfs_to_go = []
            
            for i in orfs:
                
                if 'tga' in i[0:-1]:
                    
                    orfs_to_go.append(i)
                    
                if 'taa' in i[0:-1]:
                    orfs_to_go.append(i)
                    
                if 'tag' in i[0:-1]:
                    orfs_to_go.append(i)
                    

            ## FILTERING OUT SEQUENCES WITH A STOP CODON BETWEEN ATG AND THE LAST CODON
            orfs2 = [obj for obj in orfs if obj not in orfs_to_go]
            
  ############ airtight correct so far (DO NOT TOUCH ABOVE!!!)          
        
            ## ASSEMBLING TRIPLETS INTO A SEAMLESS STRETCH
            orfs3 = []
            
            for item in orfs2:
                orfs3.append(''.join(item))
                
   ############ airtight correct so far (DO NOT TOUCH ABOVE!!!) 

            output = []
        
            ## CONTROL FOR THE LENGTH OF THE ORF
            for chain in orfs3:
                if len(chain) >= orf_length:
                    output.append(chain)
          
            
             
            if output == []:
                print('\nNo ORF(s) of' , orf_length, 'bp was found')
                break
           
            
            for p, q in enumerate(output):
                
                pass
            
            print('\033[1m' + '\nNumber of ORF(s) found:', p+1, '\033[0m')
            
            for p, q in enumerate(output):
                print('\n','\033[1m',  p+1 , '\033[0m','-',q)
                print('\nORF length:', len(q))

            break
